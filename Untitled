# add to autoload
class StripeAPI
  def self.create_customer(params)
    Stripe::Customer.create(meta_data: params)
  end

  def self.set_default_source_for_customer(customer, source_token)
    customer = Stripe::Customer.retrieve(customer.stripe_id)
    customer.source = source_token
    return customer if customer.save
    return false
  end

  def self.create_charge(amount, customer)
    charge = Stripe::Charge.create( amount: amount, customer: customer.stripe_id )
    if charge[“status”] == “succeeded”
      return charge
    else
      return false
    end
  end

end

class PostmatesAPI
end

class DelightedAPI
end

class ShippoAPI
end

# etcetera

class SiftAPI
  def self.check(model)
  end
end

module PaymentHelper
  def get_payment_id
    meta_data = {customer_type: self.class.name}
    stripe_customer = StripeAPI.create_customer(meta_data)

    if stripe_customer
      update_attributes(stripe_id: stripe_customer[:id])
    else
      false
    end
  end

  def charge(amount)
    StripeAPI.create_charge(amount)
  end

  def get_fraud_score
    Sift.check(self)
  end

end

module ShippingHelper
end

# customer model
class Customer
  include PaymentHelper
  include ShippingHelper

end

class Store
  include PaymentHelper
end
# @customer.get_payment_id
# @customer.charge(100)

end
